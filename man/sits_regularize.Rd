% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sits_regularize.R
\name{sits_regularize}
\alias{sits_regularize}
\title{Creates a regularized data cube from an irregular one}
\usage{
sits_regularize(
  cube,
  name,
  output_dir,
  period = NULL,
  roi = NULL,
  res = NULL,
  agg_method = NULL,
  resampling = "bilinear",
  cloud_mask = TRUE,
  ...,
  vrt_dir = tempdir(),
  dir_images = NULL
)
}
\arguments{
\item{cube}{A \code{sits_cube} object whose spacing of observation
times is not constant and will be regularized by the \code{gdalcubes}
package.}

\item{name}{A \code{character} with name of the output data cube}

\item{output_dir}{A \code{character} with a directory where the regularized
images will be written by \code{gdalcubes}.}

\item{period}{A \code{character} with ISO8601 time period for regular
data cubes produced by \code{gdalcubes}, with number and unit, e.g., "P16D"
for 16 days. Use "D", "M" and "Y" for days, month and year.}

\item{roi}{A named \code{numeric} vector with a region of interest.
See above}

\item{res}{A \code{numeric} with spatial resolution of the image that
will be aggregated.}

\item{agg_method}{A \code{character} with method that will be applied by
\code{gdalcubes} for aggregation.
Options: \code{min}, \code{max}, \code{mean}, \code{median} and
\code{first}.}

\item{resampling}{A \code{character} with method to be used by
\code{gdalcubes} for resampling in mosaic operation.
Options: \code{near}, \code{bilinear}, \code{bicubic} or others supported by
gdalwarp (see https://gdal.org/programs/gdalwarp.html).
By default is bilinear.}

\item{cloud_mask}{A \code{logical} to use cloud band for aggregation by
\code{gdalcubes}. Default is \code{TRUE}.}

\item{dir_images}{TODO: add documentation that this param is depricated}
}
\value{
A \code{sits_cube} with ... TODO: add documentação aqui
}
\description{
Creates cubes with regular time intervals
 using the gdalcubes package. Cubes are composed using "min", "max", "mean",
"median" or "first" functions. Users need to provide an
 time interval which is used by the composition function.
}
\note{
The "roi" parameter defines a region of interest. It can be
   an sf_object, a shapefile, or a bounding box vector with
   named XY values ("xmin", "xmax", "ymin", "ymax") or
   named lat/long values ("lat_min", "lat_max", "long_min", "long_max")
}
\examples{
{
\dontrun{

# --- Access to the AWS STAC
# Provide your AWS credentials as environment variables
Sys.setenv(
    "AWS_ACCESS_KEY_ID" = <your_aws_access_key>,
    "AWS_SECRET_ACCESS_KEY" = <your_aws_secret_access_key>
)

# define an AWS data cube
  s2_cube <- sits_cube(source = "AWS",
                      name = "T20LKP_2018_2019",
                      collection = "sentinel-s2-l2a",
                      bands = c("B08", "SCL"),
                      tiles = c("20LKP"),
                      start_date = as.Date("2018-07-18"),
                      end_date = as.Date("2018-08-18"),
                      s2_resolution = 60
)

# create a directory to store the resulting images
dir.create(paste0(tempdir(),"/images/"))

 # Build a data cube of equal intervals using the "gdalcubes" package
gc_cube <- sits_regularize(cube   = s2_cube,
                     name          = "T20LKP_2018_2019_1M",
                     dir_images   = paste0(tempdir(),"/images/"),
                     period        = "P1M",
                     agg_method    = "median",
                     resampling    = "bilinear",
                     cloud_mask    = TRUE)
}
}

}
\references{
APPEL, Marius; PEBESMA, Edzer. On-demand processing of data cubes
 from satellite image collections with the gdalcubes library. Data, v. 4,
 n. 3, p. 92, 2019. DOI: 10.3390/data4030092.
}
