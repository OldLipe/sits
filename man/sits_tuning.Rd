% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sits_tuning.R
\name{sits_tuning}
\alias{sits_tuning}
\title{Tuning deep learning models hyper-parameters}
\usage{
sits_tuning(
  samples,
  samples_validation = NULL,
  validation_split = 0.2,
  ml_method = sits_tempcnn(),
  params = list(optimizer = torchopt::optim_adamw, opt_hparams = list(lr = uniform(0,
    1))),
  trials = 30,
  multicores = 2,
  progress = FALSE
)
}
\arguments{
\item{samples}{Time series set to be validated.}

\item{samples_validation}{Time series set used for validation.}

\item{validation_split}{Percent of original time series set to be used
for validation (if samples_validation is NULL)}

\item{ml_method}{Machine learning method.}

\item{params}{List with hyper parameters to be passed to
\code{ml_method}. User can use \code{uniform}, \code{choice},
\code{randint}, \code{normal}, \code{lognormal}, \code{loguniform},
and \code{beta} functions to randomize parameters.}

\item{trials}{Number of random trials to perform the random search.}

\item{multicores}{Number of cores to process in parallel}

\item{progress}{Show progress bar?}
}
\value{
A list containing the best model and a tibble with all performances
}
\description{
Deep learning models use stochastic gradient descent techniques to
find optimal solutions. To that end, these models use optimization
algorithms that approximate the actual solution, which would be
computationally expensive. Each of these algorithms uses a set of
hyperparameters, that have to be adjusted to achieve best performance
for each application.
This function combines all parameters and computes torch models to
parameter combination, do a validation using validation samples or
splitting samples using validation_split. The function returns the
best hyper-parameters in a list.
}
\examples{
if (sits_active_tests()) {
samples <- sits_select(samples_modis_4bands, bands = "NDVI")

tuned <- sits_tuning_random(
   samples,
   ml_method = sits_tempcnn(),
   params = list(
       optimizer = torchopt::optim_adamw,
       opt_hparams = list(
           lr = uniform(0, 1)
       )
   ),
   trials = 4,
   multicores = 1,
   progress = FALSE
 )
}

}
